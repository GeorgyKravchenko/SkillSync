// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Reaction {
  LIKE
  DISLIKE
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  description     String?
  avatar          String?
  name            String
  password        String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  posts           Post[]
  Comment         Comment[]
  PostReaction    PostReaction[]
  CommentReaction CommentReaction[]
}

model Post {
  id            Int      @id @default(autoincrement())
  title         String
  content       String?
  authorId      Int      @map("author_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  likesCount    Int      @default(0) @map("likes_count")
  dislikesCount Int      @default(0) @map("dislikes_count")

  author        User           @relation(fields: [authorId], references: [id])
  topic         Topic          @relation(fields: [topicId], references: [id])
  topicId       Int
  comments      Comment[]
  PostReactions PostReaction[]
}

model Topic {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  title String
  posts Post[]
}

model Comment {
  id            Int    @id @default(autoincrement())
  content       String
  postId        Int    @map("post_id")
  authorId      Int    @map("author_id")
  likesCount    Int    @default(0) @map("likes_count")
  dislikesCount Int    @default(0) @map("dislikes_count")

  post             Post              @relation(fields: [postId], references: [id])
  author           User              @relation(fields: [authorId], references: [id])
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  CommentReactions CommentReaction[]
}

model PostReaction {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  authorId  Int      @map("author_id")
  reaction  Reaction
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([postId, authorId])
}

model CommentReaction {
  id        Int      @id @default(autoincrement())
  commentId Int      @map("comment_id")
  authorId  Int      @map("author_id")
  reaction  Reaction
  comment   Comment  @relation(fields: [commentId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([commentId, authorId])
}
